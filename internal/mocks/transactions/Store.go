// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	transactions "github.com/d-ashesss/mah-moneh/internal/transactions"
	mock "github.com/stretchr/testify/mock"

	users "github.com/d-ashesss/mah-moneh/internal/users"

	uuid "github.com/gofrs/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// DeleteTransaction provides a mock function with given fields: ctx, tx
func (_m *Store) DeleteTransaction(ctx context.Context, tx *transactions.Transaction) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *transactions.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransaction provides a mock function with given fields: ctx, _a1
func (_m *Store) GetTransaction(ctx context.Context, _a1 uuid.UUID) (*transactions.Transaction, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *transactions.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*transactions.Transaction, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *transactions.Transaction); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transactions.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTransactions provides a mock function with given fields: ctx, u, month
func (_m *Store) GetUserTransactions(ctx context.Context, u *users.User, month string) (transactions.TransactionCollection, error) {
	ret := _m.Called(ctx, u, month)

	var r0 transactions.TransactionCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User, string) (transactions.TransactionCollection, error)); ok {
		return rf(ctx, u, month)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *users.User, string) transactions.TransactionCollection); ok {
		r0 = rf(ctx, u, month)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transactions.TransactionCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *users.User, string) error); ok {
		r1 = rf(ctx, u, month)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTransaction provides a mock function with given fields: ctx, tx
func (_m *Store) SaveTransaction(ctx context.Context, tx *transactions.Transaction) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *transactions.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
